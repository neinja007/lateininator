generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String        @id @unique
  email                  String
  name                   String
  points                 Int           @default(0)
  doNotShowInLeaderboard Boolean       @default(false)
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  premium                Boolean       @default(false)
  stripeCustomerId       String?       @unique
  savedCollections       Collection[]  @relation("saved")
  ownedCollections       Collection[]  @relation("owner")
  settings               UserSetting[]
  staff                  Boolean       @default(false)

  words Word[] @relation("createdBy")
}

model UserSetting {
  id           Int        @id @default(autoincrement())
  userId       String
  settingKey   SettingKey
  settingValue String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, settingKey])
  @@index([userId])
  @@map("user_settings")
}

model DefaultSetting {
  id           Int        @id @default(autoincrement())
  settingKey   SettingKey @unique
  defaultValue String

  @@map("default_settings")
}

model Collection {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  lists       List[]
  savedBy     User[]   @relation("saved")
  private     Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  owner       User     @relation("owner", fields: [ownerId], references: [id])
  ownerId     String   @default("user_lateininator")
}

model List {
  id           Int        @id @default(autoincrement())
  name         String
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId Int
  words        Word[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Word {
  id           Int      @id @default(autoincrement())
  type         Type
  lists        List[]
  name         String
  translation  String[]
  info         String?
  derivative   Word?    @relation("derivative", fields: [derivativeId], references: [id])
  derivativeId Int?
  exception    Json     @default("{}") @db.JsonB
  base         Word[]   @relation("derivative")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  noun        Noun?      @relation("noun", fields: [nounId], references: [id])
  nounId      Int?       @unique
  verb        Verb?      @relation(fields: [verbId], references: [id])
  verbId      Int?       @unique
  adjective   Adjective? @relation(fields: [adjectiveId], references: [id])
  adjectiveId Int?       @unique

  private     Boolean @default(true)
  createdBy   User    @relation("createdBy", fields: [createdById], references: [id])
  createdById String
}

model Noun {
  id         Int        @id @default(autoincrement())
  pluralOnly Boolean    @default(false)
  declension Declension
  genitive   String
  gender     Gender

  word Word? @relation("noun")
}

model Verb {
  id          Int         @id @default(autoincrement())
  conjugation Conjugation
  present     String
  perfect     String
  participle  String

  word Word?
}

model Adjective {
  id         Int        @id @default(autoincrement())
  comparison Comparison
  femininum  String
  neutrum    String

  word Word?
}

enum Declension {
  A
  O
  K
  M
  I
  E
  U
  NONE
}

enum Conjugation {
  A
  E
  K
  I
  M
  NONE
}

enum Gender {
  M
  F
  N
  NONE
}

enum Comparison {
  A_O
  K
  NONE
}

enum Type {
  NOUN
  VERB
  ADJECTIVE
  ADVERB
  PRONOUN
  OTHER
}

enum SettingKey {
  LANGUAGE
  DICTIONARY_VOCATIVE
  TESTING_VOCATIVE
  PRIMARY_COLOR
  BACKGROUND_PATTERN
}
