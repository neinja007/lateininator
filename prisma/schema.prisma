generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id
  email       String       @unique
  name        String
  points      Int          @default(0)
  createdAt   DateTime     @default(now())
  premium     Boolean      @default(false)
  collections Collection[]
}

model Collection {
  id    Int    @id @default(autoincrement())
  name  String
  lists List[]
  User  User[]
}

model List {
  id           Int        @id @default(autoincrement())
  name         String
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId Int
  words        Word[]
}

model Word {
  id           Int      @id @default(autoincrement())
  list         List     @relation(fields: [listId], references: [id])
  listId       Int
  word         String
  translation  String[]
  info         String?
  derivative   Word?    @relation("derivative", fields: [derivativeId], references: [id])
  derivativeId Int?
  exception    Json?    @db.JsonB
  base         Word[]   @relation("derivative")

  noun      Noun?
  verb      Verb?
  adjective Adjective?
}

model Noun {
  id         Int        @id @default(autoincrement())
  pluralOnly Boolean    @default(false)
  declension Declension
  genitive   String
  gender     Gender

  word   Word @relation(fields: [wordId], references: [id])
  wordId Int  @unique
}

model Verb {
  id          Int         @id @default(autoincrement())
  conjugation Conjugation
  present     String
  perfect     String
  participle  String

  word   Word @relation(fields: [wordId], references: [id])
  wordId Int  @unique
}

model Adjective {
  id         Int        @id @default(autoincrement())
  comparison Comparison
  femininum  String
  neutrum    String

  word   Word @relation(fields: [wordId], references: [id])
  wordId Int  @unique
}

enum Declension {
  A
  O
  K
  M
  I
  E
  U
  NONE
}

enum Conjugation {
  A
  E
  K
  I
  M
  NONE
}

enum Gender {
  M
  F
  N
  NONE
}

enum Comparison {
  A_O
  K
  NONE
}
